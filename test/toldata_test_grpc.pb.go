// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.5
// source: toldata_test.proto

package test

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// TestServiceClient is the client API for TestService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type TestServiceClient interface {
	GetTestA(ctx context.Context, in *TestARequest, opts ...grpc.CallOption) (*TestAResponse, error)
	GetTestAB(ctx context.Context, in *TestARequest, opts ...grpc.CallOption) (*TestAResponse, error)
	GetTestGetIP(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*TestGetIPResponse, error)
	FeedData(ctx context.Context, opts ...grpc.CallOption) (TestService_FeedDataClient, error)
	StreamData(ctx context.Context, in *StreamDataRequest, opts ...grpc.CallOption) (TestService_StreamDataClient, error)
	StreamDataAlt1(ctx context.Context, in *StreamDataRequest, opts ...grpc.CallOption) (TestService_StreamDataAlt1Client, error)
	TestEmpty(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Empty, error)
}

type testServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewTestServiceClient(cc grpc.ClientConnInterface) TestServiceClient {
	return &testServiceClient{cc}
}

func (c *testServiceClient) GetTestA(ctx context.Context, in *TestARequest, opts ...grpc.CallOption) (*TestAResponse, error) {
	out := new(TestAResponse)
	err := c.cc.Invoke(ctx, "/cdl.toldatatest.TestService/GetTestA", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *testServiceClient) GetTestAB(ctx context.Context, in *TestARequest, opts ...grpc.CallOption) (*TestAResponse, error) {
	out := new(TestAResponse)
	err := c.cc.Invoke(ctx, "/cdl.toldatatest.TestService/GetTestAB", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *testServiceClient) GetTestGetIP(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*TestGetIPResponse, error) {
	out := new(TestGetIPResponse)
	err := c.cc.Invoke(ctx, "/cdl.toldatatest.TestService/GetTestGetIP", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *testServiceClient) FeedData(ctx context.Context, opts ...grpc.CallOption) (TestService_FeedDataClient, error) {
	stream, err := c.cc.NewStream(ctx, &TestService_ServiceDesc.Streams[0], "/cdl.toldatatest.TestService/FeedData", opts...)
	if err != nil {
		return nil, err
	}
	x := &testServiceFeedDataClient{stream}
	return x, nil
}

type TestService_FeedDataClient interface {
	Send(*FeedDataRequest) error
	CloseAndRecv() (*FeedDataResponse, error)
	grpc.ClientStream
}

type testServiceFeedDataClient struct {
	grpc.ClientStream
}

func (x *testServiceFeedDataClient) Send(m *FeedDataRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *testServiceFeedDataClient) CloseAndRecv() (*FeedDataResponse, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(FeedDataResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *testServiceClient) StreamData(ctx context.Context, in *StreamDataRequest, opts ...grpc.CallOption) (TestService_StreamDataClient, error) {
	stream, err := c.cc.NewStream(ctx, &TestService_ServiceDesc.Streams[1], "/cdl.toldatatest.TestService/StreamData", opts...)
	if err != nil {
		return nil, err
	}
	x := &testServiceStreamDataClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type TestService_StreamDataClient interface {
	Recv() (*StreamDataResponse, error)
	grpc.ClientStream
}

type testServiceStreamDataClient struct {
	grpc.ClientStream
}

func (x *testServiceStreamDataClient) Recv() (*StreamDataResponse, error) {
	m := new(StreamDataResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *testServiceClient) StreamDataAlt1(ctx context.Context, in *StreamDataRequest, opts ...grpc.CallOption) (TestService_StreamDataAlt1Client, error) {
	stream, err := c.cc.NewStream(ctx, &TestService_ServiceDesc.Streams[2], "/cdl.toldatatest.TestService/StreamDataAlt1", opts...)
	if err != nil {
		return nil, err
	}
	x := &testServiceStreamDataAlt1Client{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type TestService_StreamDataAlt1Client interface {
	Recv() (*StreamDataResponse, error)
	grpc.ClientStream
}

type testServiceStreamDataAlt1Client struct {
	grpc.ClientStream
}

func (x *testServiceStreamDataAlt1Client) Recv() (*StreamDataResponse, error) {
	m := new(StreamDataResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *testServiceClient) TestEmpty(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/cdl.toldatatest.TestService/TestEmpty", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TestServiceServer is the server API for TestService service.
// All implementations must embed UnimplementedTestServiceServer
// for forward compatibility
type TestServiceServer interface {
	GetTestA(context.Context, *TestARequest) (*TestAResponse, error)
	GetTestAB(context.Context, *TestARequest) (*TestAResponse, error)
	GetTestGetIP(context.Context, *Empty) (*TestGetIPResponse, error)
	FeedData(TestService_FeedDataServer) error
	StreamData(*StreamDataRequest, TestService_StreamDataServer) error
	StreamDataAlt1(*StreamDataRequest, TestService_StreamDataAlt1Server) error
	TestEmpty(context.Context, *Empty) (*Empty, error)
	mustEmbedUnimplementedTestServiceServer()
}

// UnimplementedTestServiceServer must be embedded to have forward compatible implementations.
type UnimplementedTestServiceServer struct {
}

func (UnimplementedTestServiceServer) GetTestA(context.Context, *TestARequest) (*TestAResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTestA not implemented")
}
func (UnimplementedTestServiceServer) GetTestAB(context.Context, *TestARequest) (*TestAResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTestAB not implemented")
}
func (UnimplementedTestServiceServer) GetTestGetIP(context.Context, *Empty) (*TestGetIPResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTestGetIP not implemented")
}
func (UnimplementedTestServiceServer) FeedData(TestService_FeedDataServer) error {
	return status.Errorf(codes.Unimplemented, "method FeedData not implemented")
}
func (UnimplementedTestServiceServer) StreamData(*StreamDataRequest, TestService_StreamDataServer) error {
	return status.Errorf(codes.Unimplemented, "method StreamData not implemented")
}
func (UnimplementedTestServiceServer) StreamDataAlt1(*StreamDataRequest, TestService_StreamDataAlt1Server) error {
	return status.Errorf(codes.Unimplemented, "method StreamDataAlt1 not implemented")
}
func (UnimplementedTestServiceServer) TestEmpty(context.Context, *Empty) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TestEmpty not implemented")
}
func (UnimplementedTestServiceServer) mustEmbedUnimplementedTestServiceServer() {}

// UnsafeTestServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TestServiceServer will
// result in compilation errors.
type UnsafeTestServiceServer interface {
	mustEmbedUnimplementedTestServiceServer()
}

func RegisterTestServiceServer(s grpc.ServiceRegistrar, srv TestServiceServer) {
	s.RegisterService(&TestService_ServiceDesc, srv)
}

func _TestService_GetTestA_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TestARequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TestServiceServer).GetTestA(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cdl.toldatatest.TestService/GetTestA",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TestServiceServer).GetTestA(ctx, req.(*TestARequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TestService_GetTestAB_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TestARequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TestServiceServer).GetTestAB(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cdl.toldatatest.TestService/GetTestAB",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TestServiceServer).GetTestAB(ctx, req.(*TestARequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TestService_GetTestGetIP_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TestServiceServer).GetTestGetIP(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cdl.toldatatest.TestService/GetTestGetIP",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TestServiceServer).GetTestGetIP(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _TestService_FeedData_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(TestServiceServer).FeedData(&testServiceFeedDataServer{stream})
}

type TestService_FeedDataServer interface {
	SendAndClose(*FeedDataResponse) error
	Recv() (*FeedDataRequest, error)
	grpc.ServerStream
}

type testServiceFeedDataServer struct {
	grpc.ServerStream
}

func (x *testServiceFeedDataServer) SendAndClose(m *FeedDataResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *testServiceFeedDataServer) Recv() (*FeedDataRequest, error) {
	m := new(FeedDataRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _TestService_StreamData_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(StreamDataRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(TestServiceServer).StreamData(m, &testServiceStreamDataServer{stream})
}

type TestService_StreamDataServer interface {
	Send(*StreamDataResponse) error
	grpc.ServerStream
}

type testServiceStreamDataServer struct {
	grpc.ServerStream
}

func (x *testServiceStreamDataServer) Send(m *StreamDataResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _TestService_StreamDataAlt1_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(StreamDataRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(TestServiceServer).StreamDataAlt1(m, &testServiceStreamDataAlt1Server{stream})
}

type TestService_StreamDataAlt1Server interface {
	Send(*StreamDataResponse) error
	grpc.ServerStream
}

type testServiceStreamDataAlt1Server struct {
	grpc.ServerStream
}

func (x *testServiceStreamDataAlt1Server) Send(m *StreamDataResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _TestService_TestEmpty_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TestServiceServer).TestEmpty(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cdl.toldatatest.TestService/TestEmpty",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TestServiceServer).TestEmpty(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

// TestService_ServiceDesc is the grpc.ServiceDesc for TestService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var TestService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "cdl.toldatatest.TestService",
	HandlerType: (*TestServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetTestA",
			Handler:    _TestService_GetTestA_Handler,
		},
		{
			MethodName: "GetTestAB",
			Handler:    _TestService_GetTestAB_Handler,
		},
		{
			MethodName: "GetTestGetIP",
			Handler:    _TestService_GetTestGetIP_Handler,
		},
		{
			MethodName: "TestEmpty",
			Handler:    _TestService_TestEmpty_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "FeedData",
			Handler:       _TestService_FeedData_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "StreamData",
			Handler:       _TestService_StreamData_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "StreamDataAlt1",
			Handler:       _TestService_StreamDataAlt1_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "toldata_test.proto",
}
