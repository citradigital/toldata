// Code generated by github.com/darmawan01/toldata. DO NOT EDIT.
// package: cdl.toldatatest
// source: toldata_test.proto
package test

import (
	"encoding/json"
	"net"
	"net/http"
	"strings"
	"time"

	"github.com/darmawan01/toldata"
	context "golang.org/x/net/context"
	"google.golang.org/grpc/peer"
	"google.golang.org/protobuf/proto"
)

func throwError(w http.ResponseWriter, message string, code int) {
	errorMessage := toldata.ErrorMessage{
		ErrorMessage: message,
		Timestamp:    time.Now().Unix(),
	}

	msg, err := proto.Marshal(&errorMessage)
	if err != nil {
		http.Error(w, "{\"error-message\": \"internal-server-error\"}", http.StatusInternalServerError)
	} else {
		http.Error(w, string(msg), code)
	}
}

type TestServiceREST struct {
	Context context.Context
	Bus     *toldata.Bus
	Service *TestServiceToldataClient
}

func NewTestServiceREST(ctx context.Context, config toldata.ServiceConfiguration) (*TestServiceREST, error) {
	client, err := toldata.NewBus(ctx, config)
	if err != nil {
		return nil, err
	}

	service := TestServiceREST{
		Context: ctx,
		Bus:     client,
		Service: NewTestServiceToldataClient(client),
	}

	return &service, nil
}

func (svc *TestServiceREST) InstallTestServiceMux(mux *http.ServeMux) {

	mux.HandleFunc("/api/test/cdl.toldatatest/TestService/GetTestA",
		func(w http.ResponseWriter, r *http.Request) {
			if r.Method != "POST" {
				throwError(w, "Invalid request method", http.StatusMethodNotAllowed)
				return
			}

			var req TestARequest
			err := json.NewDecoder(r.Body).Decode(&req)
			if err != nil {
				throwError(w, err.Error(), http.StatusBadRequest)
				return
			}
			ip := strings.Split(r.RemoteAddr, ":")[0]
			ipaddr := &net.IPAddr{IP: net.ParseIP(ip)}
			peerInfo := &peer.Peer{Addr: ipaddr}
			ctxWithPeer := peer.NewContext(svc.Context, peerInfo)
			ret, err := svc.Service.GetTestA(ctxWithPeer, &req)
			if err != nil {
				throwError(w, err.Error(), http.StatusInternalServerError)
				return
			}

			msg, err := json.Marshal(ret)
			if err != nil {
				throwError(w, err.Error(), http.StatusInternalServerError)
				return
			} else {
				w.Write(msg)
			}
		})

	mux.HandleFunc("/api/test/cdl.toldatatest/TestService/GetTestAB",
		func(w http.ResponseWriter, r *http.Request) {
			if r.Method != "POST" {
				throwError(w, "Invalid request method", http.StatusMethodNotAllowed)
				return
			}

			var req TestARequest
			err := json.NewDecoder(r.Body).Decode(&req)
			if err != nil {
				throwError(w, err.Error(), http.StatusBadRequest)
				return
			}
			ip := strings.Split(r.RemoteAddr, ":")[0]
			ipaddr := &net.IPAddr{IP: net.ParseIP(ip)}
			peerInfo := &peer.Peer{Addr: ipaddr}
			ctxWithPeer := peer.NewContext(svc.Context, peerInfo)
			ret, err := svc.Service.GetTestAB(ctxWithPeer, &req)
			if err != nil {
				throwError(w, err.Error(), http.StatusInternalServerError)
				return
			}

			msg, err := json.Marshal(ret)
			if err != nil {
				throwError(w, err.Error(), http.StatusInternalServerError)
				return
			} else {
				w.Write(msg)
			}
		})

	mux.HandleFunc("/api/test/cdl.toldatatest/TestService/GetTestGetIP",
		func(w http.ResponseWriter, r *http.Request) {
			if r.Method != "POST" {
				throwError(w, "Invalid request method", http.StatusMethodNotAllowed)
				return
			}

			var req Empty
			err := json.NewDecoder(r.Body).Decode(&req)
			if err != nil {
				throwError(w, err.Error(), http.StatusBadRequest)
				return
			}
			ip := strings.Split(r.RemoteAddr, ":")[0]
			ipaddr := &net.IPAddr{IP: net.ParseIP(ip)}
			peerInfo := &peer.Peer{Addr: ipaddr}
			ctxWithPeer := peer.NewContext(svc.Context, peerInfo)
			ret, err := svc.Service.GetTestGetIP(ctxWithPeer, &req)
			if err != nil {
				throwError(w, err.Error(), http.StatusInternalServerError)
				return
			}

			msg, err := json.Marshal(ret)
			if err != nil {
				throwError(w, err.Error(), http.StatusInternalServerError)
				return
			} else {
				w.Write(msg)
			}
		})

	mux.HandleFunc("/api/test/cdl.toldatatest/TestService/TestEmpty",
		func(w http.ResponseWriter, r *http.Request) {
			if r.Method != "POST" {
				throwError(w, "Invalid request method", http.StatusMethodNotAllowed)
				return
			}

			var req Empty
			err := json.NewDecoder(r.Body).Decode(&req)
			if err != nil {
				throwError(w, err.Error(), http.StatusBadRequest)
				return
			}
			ip := strings.Split(r.RemoteAddr, ":")[0]
			ipaddr := &net.IPAddr{IP: net.ParseIP(ip)}
			peerInfo := &peer.Peer{Addr: ipaddr}
			ctxWithPeer := peer.NewContext(svc.Context, peerInfo)
			ret, err := svc.Service.TestEmpty(ctxWithPeer, &req)
			if err != nil {
				throwError(w, err.Error(), http.StatusInternalServerError)
				return
			}

			msg, err := json.Marshal(ret)
			if err != nil {
				throwError(w, err.Error(), http.StatusInternalServerError)
				return
			} else {
				w.Write(msg)
			}
		})

}
