// Code generated by github.com/darmawan01/toldata. DO NOT EDIT.
// package: cdl.toldatatest
// source: toldata_test.proto
package test

import (
	"github.com/darmawan01/toldata"
	context "golang.org/x/net/context"
	"io"
)

// Workaround for template problem
func _eof_grpc() error {
	return io.EOF
}

type TestServiceGRPC struct {
	Context context.Context
	Bus     *toldata.Bus
	Service *TestServiceToldataClient
}

func NewTestServiceGRPC(ctx context.Context, config toldata.ServiceConfiguration) (*TestServiceGRPC, error) {
	client, err := toldata.NewBus(ctx, config)
	if err != nil {
		return nil, err
	}

	service := TestServiceGRPC{
		Context: ctx,
		Bus:     client,
		Service: NewTestServiceToldataClient(client),
	}

	return &service, nil
}

func (svc *TestServiceGRPC) Close() {
	svc.Bus.Close()
}

func (svc *TestServiceGRPC) GetTestA(ctx context.Context, req *TestARequest) (*TestAResponse, error) {
	return svc.Service.GetTestA(ctx, req)
}

func (svc *TestServiceGRPC) GetTestAB(ctx context.Context, req *TestARequest) (*TestAResponse, error) {
	return svc.Service.GetTestAB(ctx, req)
}

func (svc *TestServiceGRPC) GetTestGetIP(ctx context.Context, req *toldata.Empty) (*TestGetIPResponse, error) {
	return svc.Service.GetTestGetIP(ctx, req)
}

func (svc *TestServiceGRPC) FeedData(stream TestService_FeedDataServer) error {
	svrStream, err := svc.Service.FeedData(stream.Context())
	if err != nil {
		return err
	}

	for {
		isEOF := false
		data, err := stream.Recv()
		if err != nil {
			if err == io.EOF {
				isEOF = true
			} else {
				return err
			}
		}

		if data != nil {
			err = svrStream.Send(data)
			if err != nil {
				return err
			}
		}
		if isEOF {
			break
		}
	}

	resp, err := svrStream.Done()
	if err != nil {
		return err
	}
	err = stream.SendAndClose(resp)

	if err != nil {
		return err
	}

	return nil
}

func (svc *TestServiceGRPC) StreamData(req *StreamDataRequest, stream TestService_StreamDataServer) error {
	svrStream, err := svc.Service.StreamData(stream.Context(), req)
	if err != nil {
		return err
	}

	for {
		data, err := svrStream.Receive()

		if err != nil {
			return err
		}
		err = stream.Send(data)
		if err != nil {
			return err
		}
	}

}

func (svc *TestServiceGRPC) StreamDataAlt1(req *StreamDataRequest, stream TestService_StreamDataAlt1Server) error {
	svrStream, err := svc.Service.StreamDataAlt1(stream.Context(), req)
	if err != nil {
		return err
	}

	for {
		data, err := svrStream.Receive()

		if err != nil {
			return err
		}
		err = stream.Send(data)
		if err != nil {
			return err
		}
	}

}

func (svc *TestServiceGRPC) TestEmpty(ctx context.Context, req *toldata.Empty) (*toldata.Empty, error) {
	return svc.Service.TestEmpty(ctx, req)
}
